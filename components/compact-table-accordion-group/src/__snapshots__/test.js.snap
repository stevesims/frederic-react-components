// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CompactTableAccordionGroup matches snapshot 1`] = `
.c3 {
  background: none;
  border: none;
  cursor: pointer;
  height: 20px;
  padding: 0;
  -webkit-transition: -webkit-transform 0.3s ease-in-out;
  -webkit-transition: transform 0.3s ease-in-out;
  transition: transform 0.3s ease-in-out;
  width: 20px;
  -webkit-transform: rotate(-90deg);
  -ms-transform: rotate(-90deg);
  transform: rotate(-90deg);
}

.c3:focus {
  outline: none;
}

.c1 {
  font-family: "nta",Arial,sans-serif;
  font-size: 14px;
  padding-bottom: 10px;
  padding-top: 10px;
  position: relative;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  margin-bottom: 8px;
}

.c4 {
  cursor: pointer;
  padding-left: 16px;
}

.c0 {
  margin-bottom: 15px;
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 15px;
  }
}

<Styled(CompactTableAccordionGroup)
  changeOnTitleClick={true}
  expanded="Expanded"
  onChange={[MockFunction]}
>
  <StyledComponent
    changeOnTitleClick={true}
    expanded="Expanded"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gzVnrw",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
          ],
        },
        "displayName": "Styled(CompactTableAccordionGroup)",
        "foldedComponentIds": Array [],
        "propTypes": Object {
          "margin": [Function],
          "mb": [Function],
          "padding": [Function],
        },
        "render": [Function],
        "styledComponentId": "sc-gzVnrw",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      }
    }
    forwardedRef={null}
    onChange={[MockFunction]}
  >
    <CompactTableAccordionGroup
      changeOnTitleClick={true}
      className="c0"
      expanded="Expanded"
      onChange={[MockFunction]}
      open={false}
    >
      <styled.div
        className="c0"
      >
        <StyledComponent
          className="c0"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-ifAKCX",
                "isStatic": true,
                "lastClassName": "c1",
                "rules": Array [
                  "font-family: \\"nta\\", Arial, sans-serif; font-size: 14px; padding-bottom: 10px; padding-top: 10px; position: relative;",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-ifAKCX",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c0 c1"
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-EHOje",
                      "isStatic": true,
                      "lastClassName": "c2",
                      "rules": Array [
                        "display: flex; margin-bottom: 8px;",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-EHOje",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="c2"
                >
                  <OpenButton
                    onChange={[MockFunction]}
                    open={false}
                  >
                    <styled.button
                      onClick={[Function]}
                      open={false}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                ":focus {
  outline: none;
} background: none; border: none; cursor: pointer; height: 20px; padding: 0; transition: transform 0.3s ease-in-out; width: 20px;",
                                [Function],
                              ],
                            },
                            "displayName": "styled.button",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": "button",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                        open={false}
                      >
                        <button
                          className="c3"
                          onClick={[Function]}
                          open={false}
                        >
                          <Arrow
                            fill="#0C60A2"
                            width={20}
                          >
                            <svg
                              height="20px"
                              viewBox="0 0 6 4"
                              width="20px"
                            >
                              <polygon
                                fill="#0C60A2"
                                points="3 4 6 1 0 1"
                              />
                            </svg>
                          </Arrow>
                        </button>
                      </StyledComponent>
                    </styled.button>
                  </OpenButton>
                  <styled.header
                    clickable={true}
                    onClick={[Function]}
                  >
                    <StyledComponent
                      clickable={true}
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bZQynM",
                            "isStatic": false,
                            "lastClassName": "c4",
                            "rules": Array [
                              [Function],
                              "padding-left: 16px;",
                            ],
                          },
                          "displayName": "styled.header",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bZQynM",
                          "target": "header",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                    >
                      <header
                        className="c4"
                        onClick={[Function]}
                      />
                    </StyledComponent>
                  </styled.header>
                  <div>
                    <div>
                      Test
                    </div>
                  </div>
                </div>
              </StyledComponent>
            </styled.div>
            <Collapse
              fixedHeight={-1}
              forceInitialAnimation={false}
              hasNestedCollapse={false}
              isOpened={false}
              onMeasure={[Function]}
              onRender={[Function]}
              onRest={[Function]}
              style={Object {}}
              theme={
                Object {
                  "collapse": "ReactCollapse--collapse",
                  "content": "ReactCollapse--content",
                }
              }
            >
              <Motion
                defaultStyle={
                  Object {
                    "height": 0,
                  }
                }
                onRest={[Function]}
                style={
                  Object {
                    "height": 0,
                  }
                }
              >
                <div
                  className="ReactCollapse--collapse"
                  style={
                    Object {
                      "height": 0,
                      "overflow": "hidden",
                    }
                  }
                >
                  <div
                    className="ReactCollapse--content"
                  >
                    Expanded
                  </div>
                </div>
              </Motion>
            </Collapse>
          </div>
        </StyledComponent>
      </styled.div>
    </CompactTableAccordionGroup>
  </StyledComponent>
</Styled(CompactTableAccordionGroup)>
`;
