// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PageHeaderExample renders the storybook example 1`] = `
.c3 {
  font-size: 30px;
  line-height: 30px;
  font-weight: 700;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  padding: 5px;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c3:hover {
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.c3:focus {
  outline: none;
  color: #0b0c0c;
  background: #ffbf47;
}

.c5 {
  font-size: 16px;
  font-weight: 700;
  line-height: 1.25;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  padding: 5px;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c5:hover {
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.c5:focus {
  outline: none;
  color: #0b0c0c;
  background: #ffbf47;
}

.c0 {
  position: relative;
  width: 100%;
  color: #ffffff;
  background: #0b0c0c;
  z-index: 100;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding-left: 30px;
  padding-right: 30px;
}

.c2 {
  padding: 10px;
}

.c4 {
  padding-top: 15px;
  padding-bottom: 15px;
}

<PageHeaderExample>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <PageHeader
        logo={
          <Unknown
            to="/"
          >
            Logo text
          </Unknown>
        }
      >
        <styled.header>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": true,
                  "lastClassName": "c0",
                  "rules": Array [
                    "position: relative; width: 100%; color: #ffffff; background: #0b0c0c; z-index: 100;",
                  ],
                },
                "displayName": "styled.header",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "header",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <header
              className="c0"
            >
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bxivhb",
                        "isStatic": true,
                        "lastClassName": "c1",
                        "rules": Array [
                          "display: flex; justify-content: space-between; align-items: center; padding-left: 30px; padding-right: 30px;",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bxivhb",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c1"
                  >
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-ifAKCX",
                              "isStatic": true,
                              "lastClassName": "c2",
                              "rules": Array [
                                "padding: 10px;",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-ifAKCX",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="c2"
                        >
                          <Component
                            to="/"
                          >
                            <NavLinkWithProp
                              activeProp="active"
                              to="/"
                            >
                              <Route
                                path="\\\\/"
                              >
                                <Styled(Component)
                                  active={true}
                                  as={[Function]}
                                  to="/"
                                >
                                  <StyledComponent
                                    active={true}
                                    as={[Function]}
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bdVaJa",
                                          "isStatic": true,
                                          "lastClassName": "c3",
                                          "rules": Array [
                                            "font-size: 30px; line-height: 30px; font-weight: 700; display: flex; padding: 5px; color: #ffffff; text-decoration: none; :hover {
  text-decoration: underline;
} :focus {
  outline: none; color: #0b0c0c; background: #ffbf47;
}",
                                          ],
                                        },
                                        "displayName": "Styled(Component)",
                                        "foldedComponentIds": Array [],
                                        "propTypes": Object {
                                          "active": [Function],
                                          "as": [Function],
                                        },
                                        "render": [Function],
                                        "styledComponentId": "sc-bdVaJa",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                        Symbol(Symbol.hasInstance): [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    to="/"
                                  >
                                    <Link
                                      active={true}
                                      className="c3"
                                      replace={false}
                                      to="/"
                                    >
                                      <a
                                        active={true}
                                        className="c3"
                                        href="/"
                                        onClick={[Function]}
                                      >
                                        Logo text
                                      </a>
                                    </Link>
                                  </StyledComponent>
                                </Styled(Component)>
                              </Route>
                            </NavLinkWithProp>
                          </Component>
                        </div>
                      </StyledComponent>
                    </styled.div>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": true,
                              "lastClassName": "c4",
                              "rules": Array [
                                "padding-top: 15px; padding-bottom: 15px;",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="c4"
                        >
                          <Component
                            exact={true}
                            to="/"
                          >
                            <NavLinkWithProp
                              activeProp="active"
                              exact={true}
                              to="/"
                            >
                              <Route
                                exact={true}
                                path="\\\\/"
                              >
                                <Styled(Component)
                                  active={true}
                                  as={[Function]}
                                  to="/"
                                >
                                  <StyledComponent
                                    active={true}
                                    as={[Function]}
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bwzfXH",
                                          "isStatic": true,
                                          "lastClassName": "c5",
                                          "rules": Array [
                                            "font-size: 16px; font-weight: 700; line-height: 1.25; display: flex; padding: 5px; color: #ffffff; text-decoration: none; :hover {
  text-decoration: underline;
} :focus {
  outline: none; color: #0b0c0c; background: #ffbf47;
}",
                                          ],
                                        },
                                        "displayName": "Styled(Component)",
                                        "foldedComponentIds": Array [],
                                        "propTypes": Object {
                                          "active": [Function],
                                          "as": [Function],
                                        },
                                        "render": [Function],
                                        "styledComponentId": "sc-bwzfXH",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                        Symbol(Symbol.hasInstance): [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    to="/"
                                  >
                                    <Link
                                      active={true}
                                      className="c5"
                                      replace={false}
                                      to="/"
                                    >
                                      <a
                                        active={true}
                                        className="c5"
                                        href="/"
                                        onClick={[Function]}
                                      >
                                        Home
                                      </a>
                                    </Link>
                                  </StyledComponent>
                                </Styled(Component)>
                              </Route>
                            </NavLinkWithProp>
                          </Component>
                          <Component
                            to="/account"
                          >
                            <NavLinkWithProp
                              activeProp="active"
                              to="/account"
                            >
                              <Route
                                path="\\\\/account"
                              >
                                <Styled(Component)
                                  active={false}
                                  as={[Function]}
                                  to="/account"
                                >
                                  <StyledComponent
                                    active={false}
                                    as={[Function]}
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bwzfXH",
                                          "isStatic": true,
                                          "lastClassName": "c5",
                                          "rules": Array [
                                            "font-size: 16px; font-weight: 700; line-height: 1.25; display: flex; padding: 5px; color: #ffffff; text-decoration: none; :hover {
  text-decoration: underline;
} :focus {
  outline: none; color: #0b0c0c; background: #ffbf47;
}",
                                          ],
                                        },
                                        "displayName": "Styled(Component)",
                                        "foldedComponentIds": Array [],
                                        "propTypes": Object {
                                          "active": [Function],
                                          "as": [Function],
                                        },
                                        "render": [Function],
                                        "styledComponentId": "sc-bwzfXH",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                        Symbol(Symbol.hasInstance): [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    to="/account"
                                  >
                                    <Link
                                      active={false}
                                      className="c5"
                                      replace={false}
                                      to="/account"
                                    >
                                      <a
                                        active={false}
                                        className="c5"
                                        href="/account"
                                        onClick={[Function]}
                                      >
                                        My Account
                                      </a>
                                    </Link>
                                  </StyledComponent>
                                </Styled(Component)>
                              </Route>
                            </NavLinkWithProp>
                          </Component>
                          <Component
                            to="/account/subsection"
                          >
                            <NavLinkWithProp
                              activeProp="active"
                              to="/account/subsection"
                            >
                              <Route
                                path="\\\\/account\\\\/subsection"
                              >
                                <Styled(Component)
                                  active={false}
                                  as={[Function]}
                                  to="/account/subsection"
                                >
                                  <StyledComponent
                                    active={false}
                                    as={[Function]}
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bwzfXH",
                                          "isStatic": true,
                                          "lastClassName": "c5",
                                          "rules": Array [
                                            "font-size: 16px; font-weight: 700; line-height: 1.25; display: flex; padding: 5px; color: #ffffff; text-decoration: none; :hover {
  text-decoration: underline;
} :focus {
  outline: none; color: #0b0c0c; background: #ffbf47;
}",
                                          ],
                                        },
                                        "displayName": "Styled(Component)",
                                        "foldedComponentIds": Array [],
                                        "propTypes": Object {
                                          "active": [Function],
                                          "as": [Function],
                                        },
                                        "render": [Function],
                                        "styledComponentId": "sc-bwzfXH",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                        Symbol(Symbol.hasInstance): [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    to="/account/subsection"
                                  >
                                    <Link
                                      active={false}
                                      className="c5"
                                      replace={false}
                                      to="/account/subsection"
                                    >
                                      <a
                                        active={false}
                                        className="c5"
                                        href="/account/subsection"
                                        onClick={[Function]}
                                      >
                                         - Account subsection
                                      </a>
                                    </Link>
                                  </StyledComponent>
                                </Styled(Component)>
                              </Route>
                            </NavLinkWithProp>
                          </Component>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </div>
                </StyledComponent>
              </styled.div>
            </header>
          </StyledComponent>
        </styled.header>
      </PageHeader>
    </Router>
  </BrowserRouter>
</PageHeaderExample>
`;
