// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DistractionFree matches snapshot 1`] = `
.c3 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  color: #ffffff;
}

.c4 {
  font-family: "nta",Arial,sans-serif;
  font-size: 14px;
  line-height: 1.1428571429;
  margin-left: 6px;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: #6f777b;
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 100%;
  left: 0;
  padding: 0 32px 0 90px;
}

.c1 {
  max-width: 1158px;
  padding: 20px 0;
  width: 100%;
}

.c1 > span {
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.c5 {
  background-color: #ffffff;
  font-family: "nta",Arial,sans-serif;
  height: 100%;
  max-width: 1158px;
  min-height: 640px;
  width: 100%;
}

.c2 {
  background-color: transparent;
  border: 0;
}

@media only screen and (min-width:641px) {
  .c4 {
    font-size: 19px;
    line-height: 1.25;
  }
}

<DistractionFree
  arrowLeftTitle="Title"
  onClick={[MockFunction]}
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "align-items: center; background-color: #6f777b; box-sizing: border-box; display: flex; flex-direction: column; height: 100%; left: 0; padding: 0 32px 0 90px;",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <styled.header>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "> span {
  text-decoration: underline;
} max-width: 1158px; padding: 20px 0; width: 100%;",
                  ],
                },
                "displayName": "styled.header",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "header",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <header
              className="c1"
            >
              <styled.button
                onClick={[MockFunction]}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-EHOje",
                        "isStatic": true,
                        "lastClassName": "c2",
                        "rules": Array [
                          "background-color: transparent; border: 0;",
                        ],
                      },
                      "displayName": "styled.button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-EHOje",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onClick={[MockFunction]}
                >
                  <button
                    className="c2"
                    onClick={[MockFunction]}
                  >
                    <ArrowLeft
                      color="#ffffff"
                      fill="#ffffff"
                      width={28}
                    >
                      <styled.span
                        color="#ffffff"
                      >
                        <StyledComponent
                          color="#ffffff"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "align-items: center; display: flex; width: fit-content;",
                                  [Function],
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="c3"
                            color="#ffffff"
                          >
                            <svg
                              fill="#ffffff"
                              height="28px"
                              viewBox="0 0 512 512"
                              width="28px"
                            >
                              <title>
                                Title
                              </title>
                              <path
                                d="M256 504C119 504 8 393 8 256S119 8 256 8s248 111 248 248-111 248-248 248zm28.9-143.6L209.4 288H392c13.3 0 24-10.7 24-24v-16c0-13.3-10.7-24-24-24H209.4l75.5-72.4c9.7-9.3 9.9-24.8.4-34.3l-11-10.9c-9.4-9.4-24.6-9.4-33.9 0L107.7 239c-9.4 9.4-9.4 24.6 0 33.9l132.7 132.7c9.4 9.4 24.6 9.4 33.9 0l11-10.9c9.5-9.5 9.3-25-.4-34.3z"
                              />
                            </svg>
                            <styled.span>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bwzfXH",
                                      "isStatic": true,
                                      "lastClassName": "c4",
                                      "rules": Array [
                                        "font-family: \\"nta\\", Arial, sans-serif; font-size: 14px; line-height: 1.1428571429; margin-left: 6px; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.25;
}",
                                      ],
                                    },
                                    "displayName": "styled.span",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bwzfXH",
                                    "target": "span",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <span
                                  className="c4"
                                >
                                  Title
                                </span>
                              </StyledComponent>
                            </styled.span>
                          </span>
                        </StyledComponent>
                      </styled.span>
                    </ArrowLeft>
                  </button>
                </StyledComponent>
              </styled.button>
            </header>
          </StyledComponent>
        </styled.header>
        <styled.article>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ifAKCX",
                  "isStatic": true,
                  "lastClassName": "c5",
                  "rules": Array [
                    "background-color: #ffffff; font-family: \\"nta\\", Arial, sans-serif; height: 100%; max-width: 1158px; min-height: 640px; width: 100%;",
                  ],
                },
                "displayName": "styled.article",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ifAKCX",
                "target": "article",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <article
              className="c5"
            >
              Text
            </article>
          </StyledComponent>
        </styled.article>
      </div>
    </StyledComponent>
  </styled.div>
</DistractionFree>
`;
